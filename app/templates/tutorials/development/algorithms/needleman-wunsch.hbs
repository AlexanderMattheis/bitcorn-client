{{#algorithm-page class="content" name="Needleman-Wunsch"
                   doiLink="https://doi.org/10.1016/0022-2836(70)90057-4"
                   year="1970"
                   authors="Needleman B. Saul, Wunsch D. Christian"
                   description=
   "Computes an optimal, global alignment for two strings $a$ and $b$ using a linear scoring-function $s$.
    In this connection, the matrix $D$ represents a dynamic programming matrix which is computed by applying
    the named scoring-function $s$ from the top left corner.
    The shown solutions are then retrieved by applying the scoring-function backwards
    from the bottom right corner i.e. negate the mathematical sign (+/-).
    Programming-technically therefore, a recursive depth-first search can be applied that stops
    when the position $(0,0)$ (top-left) is reached. The according paths gone by the depth-first search
    can be visualized below, just click on a solution to highlight the corresponding path.
    For more information and a more sophisticated version of this algorithm look
    at the project <a href='/creations/programs/bioinformatics' target='_blank' rel='noopener'>
    Bioinformatics</a>."}}

  <h3>Input</h3>
  <div id="algorithm-input">
    <p>
      <label class="input" for="sequence-a">
        <span>Sequence $a$:</span>
      </label>
      {{input class="input-text" type="text" id="sequence-a" placeholder='e.g. "AACGT"' maxlength=10
              value=input.sequenceA focus-out=(action "recompute") tabindex="1" enter=(action "recompute")}}
    </p>

    <p>
      <label class="input" for="sequence-b">
        <span>Sequence $b$:</span>
      </label>

      {{input class="input-text" type="text" id="sequence-b" placeholder='e.g. "ACGT"' maxlength=10
              value=input.sequenceB focus-out=(action "recompute") tabindex="2" enter=(action "recompute")}}
    </p>

    <div class="function">
      <label class="input">
        <span>Scoring $s$:</span>
      </label>

      <div class="property">
        <label for="gap">
          <span>Gap</span>
        </label>

        {{number-input class="input-number" inputId="gap" inputValue=input.gap minValue=-10 maxValue=10
                       inputAction=(action "recompute") inputTabIndex="3"}}
      </div>

      <div class="property">
        <label for="match">
          <span>Match</span>
        </label>

        {{number-input class="input-number" inputId="match" inputValue=input.match minValue=-10 maxValue=10
                       inputAction=(action "recompute") inputTabIndex="4"}}
      </div>

      <div class="property">
        <label for="mismatch">
          <span>Mismatch</span>
        </label>

        {{number-input class="input-number" inputId="mismatch" inputValue=input.mismatch minValue=-10 maxValue=10
                       inputAction=(action "recompute") inputTabIndex="5"}}
      </div>
    </div>
  </div>

  <br>

  <h3>Output</h3>
  <div id="algorithm-output">
    <div class="doubled-columned">
      <div class="left-part">
        {{dynamic-matrix matrix-name="D"
                         sequenceA=(array-creator output.sequenceA)
                         sequenceB=(array-creator output.sequenceB)
                         matrix=output.matrix
                         score=output.score}}
      </div>

      <div class="right-part">
        {{solution-selector results=output.alignments tracebacks=output.tracebacks rowLength=output.matrix.0.length}}
      </div>
    </div>

    <div class="single-columned">
      <a href="#" {{action "download"}}>Download</a>
    </div>
  </div>

{{/algorithm-page}}

<script type="text/javascript">
  MathJax.Hub.Queue(["Typeset", MathJax.Hub]);  // reinterpret new LaTeX code
</script>